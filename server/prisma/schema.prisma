generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id                String     @id @unique(map: "User_id_key") @default(uuid())
  name              String
  email             String     @unique(map: "User_email_key")
  password          String?
  role              Role       @default(Customer)
  status            Status
  phone             String?
  location          String?
  totalSpent        Decimal    @default(0.000000000000000000000000000000)
  joinDate          DateTime   @default(now())
  avatar            String?
  createdAt         DateTime   @default(now())
  lastLogin         DateTime?
  token             String?
  resetTokenExpiry  DateTime?
  createdCategories Category[] @relation("CreatedCategories")
  createdOrders     Order[]    @relation("CreatedOrders")
  customerOrders    Order[]    @relation("CustomerOrders")
  createdProducts   Product[]  @relation("CreatedProducts")

  @@map("user")
}

model Category {
  id          String    @id @default(uuid())
  name        String
  sku         String    @unique(map: "Category_sku_key")
  description String?   @db.LongText
  image       String?
  createdby   String
  creator     User      @relation("CreatedCategories", fields: [createdby], references: [id], map: "Category_createdby_fkey")
  products    Product[]

  @@index([createdby], map: "Category_createdby_fkey")
  @@map("category")
}

model Product {
  id          String         @id @default(uuid())
  name        String
  description String         @default("") @db.LongText
  categoryid  String
  price       Decimal
  stock       Int
  status      ProductStatus
  createdby   String
  orderItems  OrderItem[]
  category    Category       @relation(fields: [categoryid], references: [id], map: "Product_categoryid_fkey")
  creator     User           @relation("CreatedProducts", fields: [createdby], references: [id], map: "Product_createdby_fkey")
  images      ProductImage[]

  @@index([categoryid], map: "Product_categoryid_fkey")
  @@index([createdby], map: "Product_createdby_fkey")
  @@map("product")
}

model ProductImage {
  id        String  @id @default(uuid())
  url       String
  productId String
  product   Product @relation(fields: [productId], references: [id], onDelete: Cascade, map: "ProductImage_productId_fkey")

  @@index([productId], map: "ProductImage_productId_fkey")
  @@map("productimage")
}

model Order {
  id         String          @id @default(uuid())
  customerid String
  total      Decimal
  status     OrderStatus?    @default(Pending)
  payment    PaymentStatus?  @default(Pending)
  date       DateTime        @default(now())
  duedate    DateTime?
  createdby  String
  shippingId String
  creator    User            @relation("CreatedOrders", fields: [createdby], references: [id], map: "Order_createdby_fkey")
  customer   User            @relation("CustomerOrders", fields: [customerid], references: [id], map: "Order_customerid_fkey")
  shipping   ShippingAddress @relation(fields: [shippingId], references: [id], map: "Order_shippingId_fkey")
  items      OrderItem[]

  @@index([createdby], map: "Order_createdby_fkey")
  @@index([customerid], map: "Order_customerid_fkey")
  @@index([shippingId], map: "Order_shippingId_fkey")
  @@map("order")
}

model ShippingAddress {
  id        String  @id @default(uuid())
  firstName String
  lastName  String
  email     String
  address   String
  city      String
  zip       String
  orders    Order[]

  @@map("shippingaddress")
}

model OrderItem {
  id        String  @id @default(uuid())
  orderid   String
  productid String
  quantity  Int
  price     Decimal
  order     Order   @relation(fields: [orderid], references: [id], map: "OrderItem_orderid_fkey")
  product   Product @relation(fields: [productid], references: [id], map: "OrderItem_productid_fkey")

  @@index([orderid], map: "OrderItem_orderid_fkey")
  @@index([productid], map: "OrderItem_productid_fkey")
  @@map("orderitem")
}

enum Role {
  Admin
  Customer
}

enum Status {
  Active
  Inactive
}

enum ProductStatus {
  Active
  Out_of_Stock
  Discontinued
}

enum OrderStatus {
  Pending
  Processing
  Delivered
  Cancelled
  Shipped
}

enum PaymentStatus {
  Processing
  Cancelled
  Paid
  Pending
  Refunded
}
